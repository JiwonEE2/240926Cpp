/*
===============================================================
이진 탐색 트리(BinarySearchTree)
- 이진 속성과 탐색 속성을 적용한 Tree
- 이진 탐색을 통한 탐색 영역을 절반으로 줄여가며 탐색
- 탐색 : 자신의 노드보다 작은 값은 왼쪽, 큰 값은 오른쪽에 위치

[ 구현 ]
- 이진 탐색 Tree는 모든 Node들이 최대 2개의 자식 Node를 가질 수 있으며
	자신의 노드보다 작은 값들은 왼쪽, 큰 값들은 오른쪽에 위치
			  23
	   ┌──────┴──────┐
	   11            38
	┌──┴──┐       ┌──┴──┐
	3     19      31    65
	└─┐ ┌─┴─┐   ┌─┘     └─┐
	  6 17  22  24        87

[ 탐색 ]
- Root Node부터 시작하여 탐색하는 값과 비교하여
- 작은 경우 왼쪽으로, 큰 경우 오른쪽 자식 Node를 검색

[ 삽입 ]
- Root Node부터 시작하여 삽입하는 값과 비교
- 작은 경우 왼쪽, 큰 경우 오른쪽
- 만약 빈 공간이 있으면 빈 공간에 삽입

	          23(↘)
	   ┌──────┴──────┐
	   11            38(↙)
	┌──┴──┐       ┌──┴──┐
	3     19      31(↘) 65
	└─┐ ┌─┴─┐   ┌─┘
	  6 17  22  24

[ 삭제 ]
1. 자식이 0개인 Node : 단순 삭제 진행
	          23						      23
	   ┌──────┴──────┐				   ┌──────┴──────┐
	   11            38				   11            38
	┌──┴──┐       ┌──┴──┐			┌──┴──┐       ┌──┴──┐
	3     19      31    65			3     19      31    65
	└─┐ ┌─┴─┐   ┌─┘					└─┐ ┌─┴─┐   ┌─┘─┐
	  6 17 (22) 24					  6 17     24   35 

2. 자식이 1개인 Node : 삭제하는 Node의 부모와 자식을 연결 후 삭제
	          23                                 23
	   ┌──────┴──────┐                    ┌──────┴──────┐
	   11          (38)                   11            31
	┌──┴──┐       ┌──┴──┐              ┌──┴──┐       ┌──┴──┐
	3     19      31                   3     19     24     35
	└─┐ ┌─┴─┐   ┌─┘─┐                  └─┐ ┌─┴─┐  
	  6 17     24   35                   6 17     

3. 자식이 2개인 Node : 삭제하는 Node를 기준으로 오른쪽 자식 중 가장 작은 값 Node와 교체 후 삭제(또는 왼쪽 자식 중 가장 큰 값도 가능할 것 같다는 내생각!)
	            7
	     ┌──────┴──────┐
	     4             11
	  ┌──┴──┐       ┌──┴──┐
	  2     5       9     12
	┌─┴─┐   └─┐   ┌─┴─┐
	1   3     6   8   10

[ 주의점 ]
- 이진 탐색 Tree는 최악의 상황에 노드들이 한 쪽 자식으로 만 추가되는 불균형 현상이 발생된다.
- 이 경우에는 탐색 영역이 절반으로 줄여지지 않기 때문에 시간 복잡도가 증가
- 자가 균형 Tree 사용하여 방지 (RedBlack Tree(C++ STL), ...)
	        5
	      ┌─┘
	      4
	    ┌─┘
	    3
	  ┌─┘
	  2
	┌─┘
	1
===============================================================
*/